{{>partial_header}}
{{#operations}}
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
    host = NULL,
    basePath = NULL,
    scheme = NULL,
    url = NULL,
    initialize = function(host, basePath, scheme){
      self$host <- host
      self$basePath <- basePath
      self$scheme <- scheme
      self$url <- sprintf("%s://%s/%s/pet/", scheme, host, basePath)
    },

    {{#operation}}
    {{operationId}} = function({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){
      resp <- httr::{{httpMethod}}(paste0(self$url{{#pathParams}}, {{paramName}}{{/pathParams}}), httr::add_headers("User-Agent" = self$userAgent{{#hasConsumes}}, "accept" = "{{#consumes}}{{#-first}}"{{{mediaType}}}"{{/-first}}{{/consumes}}"){{/hasConsumes}}{{#hasProduces}}, "content-type" = "{{#produces}}{{#-first}}"{{{mediaType}}}"{{/-first}}{{/produces}}"{{/hasProduces}})

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}} 
        parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"),
                                 simplifyVector = FALSE)
        result <- {{returnType}}$fromJSON(parsed)
        Response$new(result, resp)
        {{/returnType}}
      } else {
        Response$new("Unexpected response status code", resp)
      }

    }
    {{/operation}}
  )
) 
{{/operations}}
